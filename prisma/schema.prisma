// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum YESorNO {
  Yes
  No
}

enum BusinessImpact {
  Cost
  Revenue
  Both
}

model UseCase {
  id                         Int            @id @default(autoincrement())
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  useCaseName                String?
  businessUnit               String?
  businessOwner              String?
  vertical                   String?
  description                String?        @db.Text
  assumptions                String?
  constraints                String?
  dependencies               String?
  crossDomainYesOrNo         YESorNO
  crossDomainValue           String?
  parentTheme                String?
  useCaseTheme               String?
  businessImpact             BusinessImpact
  businessImpactCostValue    String?
  businessImpactRevenueValue String?
  impact                     String?
  time                       String?
  systemsInvolved            String?
  source                     String?
  externalData               String?
  criticalDataElement        String?
  investmentCategory         String?
  competitiveThrust          String?
  dataTrust                  String?
  approver                   String?
  status                     String?
  priority                   String?
}

enum ConnectionType {
  MySql
  Postgresql
}

model Connection {
  id                Int                 @id @default(autoincrement())
  name              String
  host              String
  user              String
  password          String
  database          String
  port              Int
  type              ConnectionType
  description       String?             @db.Text
  isConnected       Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ProfilingSchedule ProfilingSchedule[]
}

enum ProfilingType {
  COLUMN
  TABLE
}

model ProfilingRules {
  id            Int            @id @default(autoincrement())
  name          String
  rule          String         @db.Text
  profilingType ProfilingType
  databaseType  ConnectionType
  description   String         @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum Frequency {
  Daily
  Weekly
  Monthly
  Yearly
}

model ProfilingSchedule {
  id                       Int                        @id @default(autoincrement())
  name                     String
  processName              String
  startDate                DateTime
  endDate                  DateTime
  frequency                Frequency
  selectedData             Json
  connectionId             Int
  connection               Connection                 @relation(fields: [connectionId], references: [id])
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  ProfilingScheduleToBeRun ProfilingScheduleToBeRun[]
}

model ProfilingScheduleToBeRun {
  id                  Int               @id @default(autoincrement())
  profilingScheduleId Int
  profilingSchedule   ProfilingSchedule @relation(fields: [profilingScheduleId], references: [id])
  result              Json?
  isFaild             Boolean           @default(false)
  error               String?           @db.Text
  isCompleted         Boolean           @default(false)
  runAt               DateTime
  startAt             DateTime?
  endsAt              DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}
